sc_require("swfupload.js");
sc_require("views/swfupload.js");

/**
 *  Receives all the notifications related to the upload. This is just a convenience delegate that
 *  captures all the original events generated by SWFupload. Original Documentation has been copied for convenience.
 *  
 *  The delegate also includes Error Codes for convenience.
 */
SWFU.UploadDelegate={
	
	/**
	 * Upload Error Codes, for convinience.
	 */
	UPLOAD_ERROR:SWFUpload.UPLOAD_ERROR,
	
	/**
	 * Queue Error Codes, for convenience.
	 */
	QUEUE_ERROR:SWFUpload.QUEUE_ERROR,
	
	/**
	 * return the uploadUrl
	 * @param {Object} swfuploadView
	 */
	uploadUrl: function(swfuploadView){
		// I coundn't make this work with bindings, no matter how hard I tried! :(
		return null;
	},
		
	/**
	 * fileDialogStart is fired after selectFile for selectFiles is called. 
	 * This event is fired immediately before the File Selection Dialog window is displayed. 
	 * However, the event may not execute until after the Dialog window is closed.
	 * @param {Object} swfuploadView
	 */	
	fileDialogStart: function(swfuploadView){
	},
	
	/**
	 * The fileQueued event is fired for each file that is queued after the File Selection Dialog window is closed.
	 * 
	 * @param {Object} swfuploadView
	 * @param {Object} file
	 */
	fileQueued: function(swfuploadView, file){
	},
	
	/**
	 * The fileQueueError event is fired for each file that was not queued after the File Selection Dialog window is closed. 
	 * A file may not be queued for several reasons such as, the file exceeds the file size, the file is empty or a file or queue limit has been exceeded.
	 * The reason for the queue error is specified by the error code parameter. 
	 * The error code corresponds to a SWFUpload.QUEUE_ERROR constant.
	 * @param {Object} swfuploadView
	 * @param {Object} file
	 * @param {Object} error
	 * @param {Object} message
	 */
	fileQueueError: function(swfuploadView, file, error, message){
	},
	
	/**
	 * The fileDialogComplete event fires after the File Selection Dialog window has been closed and all the selected files have been processed. 
	 * The 'number of files queued' argument indicates the number of files that were queued from the dialog selection (as opposed to the number of files in the queue).
	 * If you want file uploading to begin automatically this is a good place to call 'this.startUpload()'
	 * @param {Object} swfuploadView
	 * @param {Object} nFileSelected
	 * @param {Object} nFilesQueued
	 * @param {Object} totalFilesQueued
	 */
	fileDialogComplete: function(swfuploadView,nFileSelected, nFilesQueued, totalFilesQueued){
	},
	
	/**
	 * uploadStart is called immediately before the file is uploaded. This event provides an opportunity to perform any last minute validation, 
	 * add post params or do any other work before the file is uploaded.
	 * The upload can be cancelled by returning 'false' from uploadStart. 
	 * If you return 'true' or do not return any value then the upload proceeds. 
	 * Returning 'false' will cause an uploadError event to fired.
	 * 
	 * @param {Object} swfuploadView
	 * @param {Object} file
	 */
	uploadStart: function(swfuploadView, file){
	},
	
	
	/**
	 * The uploadProgress event is fired periodically by the Flash Control. 
	 * This event is useful for providing UI updates on the page.
	 * Note: The Linux Flash Player fires a single uploadProgress event after the entire file has been uploaded. 
	 * This is a bug in the Linux Flash Player that we cannot work around.
	 * @param {Object} swfuploadView
	 * @param {Object} file
	 * @param {Object} completedBytes
	 * @param {Object} totalBytes
	 */
	uploadProgress: function(swfuploadView,file,completedBytes,totalBytes){
	},
	
	
	/**
	 * The uploadError event is fired any time an upload is interrupted or does not complete successfully. 
	 * The error code parameter indicates the type of error that occurred. The error code parameter specifies a constant in SWFUpload.UPLOAD_ERROR.
	 * Stopping, Cancelling or returning 'false' from uploadStart will cause uploadError to fire. 
	 * Upload error will not fire for files that are cancelled but still waiting in the queue.
	 * @param {Object} swfuploadView
	 * @param {Object} file
	 * @param {Object} errorCode
	 * @param {Object} message
	 */
	uploadError: function(swfuploadView,file,errorCode,message){
	},
	
	/**
	 * uploadSuccess is fired when the entire upload has been transmitted and the server returns a HTTP 200 status code. 
	 * Any data outputted by the server is available in the server data parameter.
	 * Due to some bugs in the Flash Player the server response may not be acknowledged and no uploadSuccess event is fired by Flash. In this case the assume_success_timeout setting is checked to see if enough time has passed to fire uploadSuccess anyway. In this case the received response parameter will be false.
	 * The http_success setting allows uploadSuccess to be fired for HTTP status codes other than 200. In this case no server data is available from the Flash Player.
	 * At this point the upload is not yet complete. Another upload cannot be started from uploadSuccess.
	 * @param {Object} swfuploadView
	 * @param {Object} file
	 * @param {Object} serverData
	 * @param {Object} response
	 */
	uploadSuccess: function(swfuploadView,file,serverData,response){
	},
	
	/**
	 * uploadComplete is always fired at the end of an upload cycle (after uploadError or uploadSuccess). 
	 * At this point the upload is complete and another upload can be started.
	 * If you want the next upload to start automatically this is a good place to call this.uploadStart(). 
	 * Use caution when calling uploadStart inside the uploadComplete event if you also have code that cancels all the uploads in a queue.
	 * @param {Object} swfuploadView
	 * @param {Object} file
	 */
	uploadComplete: function(swfuploadView,file){
	}
		
};
